  swagger: "2.0"
  info:
    description: 1Laravel + Vue Ecommerce Api Documentation
    version: 1.0.0
    title: Laravel + Vue Ecommerce Api
    termsOfService: "http://swagger.io/terms/"
    contact:
      email: apiteam@localhost.com
    license:
      name: Apache 2.0
      url: "http://www.apache.org/licenses/LICENSE-2.0.html"
  host: vp2.test
  basePath: /api/v1
  tags:
    - name: Banner
      description: Everything about Banners
    - name: Category
      description: Everything about Category
    - name: Product
      description: Everything about Product
    - name: Post
      description: Everything about Post (Blog)
    - name: User
      description: Everything about User
  schemes:
    - http
  paths:
    /banner/all:
      get:
        tags:
          - Banner
        summary: Get all banner
        description: Get all banner
        operationId: getBanner
        consumes:
          - application/json
        produces:
          - application/json
        parameters:
          - name: limit
            in: query
            description: To get particular results
            required: false
            type: integer
            format: int64
        responses:
          "200":
            description: successful operation
            schema:
              type: array
              items:
                $ref: "#/definitions/Banner"
    /category/all:
      get:
        tags:
          - Category
        summary: Get all category for small banner
        description: Get all category for small banner
        operationId: getCategory
        consumes:
          - application/json
        produces:
          - application/json
        parameters:
          - name: limit
            in: query
            description: To get particular results
            required: false
            type: integer
            format: int64
        responses:
          "200":
            description: successful operation
            schema:
              type: array
              items:
                $ref: "#/definitions/Category"
    /category/parent:
      get:
        tags:
          - Category
        summary: Get all parent category
        description: Get all category where is_parent = 1
        operationId: getParentCategory
        consumes:
          - application/json
        produces:
          - application/json
        responses:
          "200":
            description: successful operation
            schema:
              type: array
              items:
                $ref: "#/definitions/Category"
    /product/all:
      get:
        tags:
          - Product
        summary: Get all product
        description: Get all product
        operationId: getProduct
        consumes:
          - application/json
        produces:
          - application/json
        parameters:
          - name: condition
            in: query
            description: To get condition based results
            required: false
            type: array
            items:
              type: string
              enum:
                - default
                - new
                - hot
            collectionFormat: multi
          - name: limit
            in: query
            description: To get particular results
            required: false
            type: integer
            format: int64
        responses:
          "200":
            description: successful operation
            schema:
              type: array
              items:
                $ref: "#/definitions/Product"
    /product/featured:
      get:
        tags:
          - Product
        summary: Get all featured product
        description: Get all featured product where is_featured = 1
        operationId: getFeaturedProduct
        consumes:
          - application/json
        produces:
          - application/json
        parameters:          
          - name: limit
            in: query
            description: To get particular results
            required: false
            type: integer
            format: int64
        responses:
          "200":
            description: successful operation
            schema:
              type: array
              items:
                $ref: "#/definitions/FeaturedProduct"
    /post/all:
      get:
        tags:
          - Post
        summary: Get all post (blog)
        description: Get all post (blog)
        operationId: getAllPost
        consumes:
          - application/json
        produces:
          - application/json
        parameters:
          - name: limit
            in: query
            description: To get particular results
            required: false
            type: integer
            format: int64
        responses:
          "200":
            description: successful operation
            schema:
              type: array
              items:
                $ref: "#/definitions/Post"
    /user/login:
      post:
        tags:
          - User
        summary: Logs user into the system
        description: ""
        operationId: loginUser
        produces:
          - application/json
        parameters:
          - name: email
            in: query
            description: The email for login
            required: true
            type: string
          - name: password
            in: query
            description: The password for login in clear text
            required: true
            type: string
        responses:
          "200":
            description: successful operation
            schema:
              type: object
              properties:
                user: 
                  $ref: "#/definitions/User"                
                token: 
                  type: string
                  example: '1|WUiTtfxK53J1PvMYng5MMBJvtw3BZdxi1r46PtJm'
                message: 
                  type: string
                  example: 'Welcome User'
            headers:
              X-Rate-Limit:
                type: integer
                format: int32
                description: calls per hour allowed by the user
              X-Expires-After:
                type: string
                format: date-time
                description: date in UTC when token expires
          "400":
            description: Invalid username/password supplied    
    /pet/findByStatus:
      get:
        tags:
          - pet
        summary: Finds Pets by status
        description: Multiple status values can be provided with comma separated strings
        operationId: findPetsByStatus
        produces:
          - application/xml
          - application/json
        parameters:
          - name: status
            in: query
            description: Status values that need to be considered for filter
            required: true
            type: array
            items:
              type: string
              enum:
                - available
                - pending
                - sold
              default: available
            collectionFormat: multi
        responses:
          "200":
            description: successful operation
            schema:
              type: array
              items:
                $ref: "#/definitions/Pet"
          "400":
            description: Invalid status value
        security:
          - petstore_auth:
              - "write:pets"
              - "read:pets"
    /pet/findByTags:
      get:
        tags:
          - pet
        summary: Finds Pets by tags
        description: "Muliple tags can be provided with comma separated strings. Use         tag1, tag2, tag3 for testing."
        operationId: findPetsByTags
        produces:
          - application/xml
          - application/json
        parameters:
          - name: tags
            in: query
            description: Tags to filter by
            required: true
            type: array
            items:
              type: string
            collectionFormat: multi
        responses:
          "200":
            description: successful operation
            schema:
              type: array
              items:
                $ref: "#/definitions/Pet"
          "400":
            description: Invalid tag value
        security:
          - petstore_auth:
              - "write:pets"
              - "read:pets"
        deprecated: true
    "/pet/{petId}":
      get:
        tags:
          - pet
        summary: Find pet by ID
        description: Returns a single pet
        operationId: getPetById
        produces:
          - application/xml
          - application/json
        parameters:
          - name: petId
            in: path
            description: ID of pet to return
            required: true
            type: integer
            format: int64
        responses:
          "200":
            description: successful operation
            schema:
              $ref: "#/definitions/Pet"
          "400":
            description: Invalid ID supplied
          "404":
            description: Pet not found
        security:
          - api_key: []
      post:
        tags:
          - pet
        summary: Updates a pet in the store with form data
        description: ""
        operationId: updatePetWithForm
        consumes:
          - application/x-www-form-urlencoded
        produces:
          - application/xml
          - application/json
        parameters:
          - name: petId
            in: path
            description: ID of pet that needs to be updated
            required: true
            type: integer
            format: int64
          - name: name
            in: formData
            description: Updated name of the pet
            required: false
            type: string
          - name: status
            in: formData
            description: Updated status of the pet
            required: false
            type: string
        responses:
          "405":
            description: Invalid input
        security:
          - petstore_auth:
              - "write:pets"
              - "read:pets"
      delete:
        tags:
          - pet
        summary: Deletes a pet
        description: ""
        operationId: deletePet
        produces:
          - application/xml
          - application/json
        parameters:
          - name: api_key
            in: header
            required: false
            type: string
          - name: petId
            in: path
            description: Pet id to delete
            required: true
            type: integer
            format: int64
        responses:
          "400":
            description: Invalid ID supplied
          "404":
            description: Pet not found
        security:
          - petstore_auth:
              - "write:pets"
              - "read:pets"
    "/pet/{petId}/uploadImage":
      post:
        tags:
          - pet
        summary: uploads an image
        description: ""
        operationId: uploadFile
        consumes:
          - multipart/form-data
        produces:
          - application/json
        parameters:
          - name: petId
            in: path
            description: ID of pet to update
            required: true
            type: integer
            format: int64
          - name: additionalMetadata
            in: formData
            description: Additional data to pass to server
            required: false
            type: string
          - name: file
            in: formData
            description: file to upload
            required: false
            type: file
        responses:
          "200":
            description: successful operation
            schema:
              $ref: "#/definitions/ApiResponse"
        security:
          - petstore_auth:
              - "write:pets"
              - "read:pets"
    /store/inventory:
      get:
        tags:
          - store
        summary: Returns pet inventories by status
        description: Returns a map of status codes to quantities
        operationId: getInventory
        produces:
          - application/json
        parameters: []
        responses:
          "200":
            description: successful operation
            schema:
              type: object
              additionalProperties:
                type: integer
                format: int32
        security:
          - api_key: []
    /store/order:
      post:
        tags:
          - store
        summary: Place an order for a pet
        description: ""
        operationId: placeOrder
        produces:
          - application/xml
          - application/json
        parameters:
          - in: body
            name: body
            description: order placed for purchasing the pet
            required: true
            schema:
              $ref: "#/definitions/Order"
        responses:
          "200":
            description: successful operation
            schema:
              $ref: "#/definitions/Order"
          "400":
            description: Invalid Order
    "/store/order/{orderId}":
      get:
        tags:
          - store
        summary: Find purchase order by ID
        description: For valid response try integer IDs with value >= 1 and <= 10.         Other values will generated exceptions
        operationId: getOrderById
        produces:
          - application/xml
          - application/json
        parameters:
          - name: orderId
            in: path
            description: ID of pet that needs to be fetched
            required: true
            type: integer
            maximum: 10
            minimum: 1
            format: int64
        responses:
          "200":
            description: successful operation
            schema:
              $ref: "#/definitions/Order"
          "400":
            description: Invalid ID supplied
          "404":
            description: Order not found
      delete:
        tags:
          - store
        summary: Delete purchase order by ID
        description: For valid response try integer IDs with positive integer value.         Negative or non-integer values will generate API errors
        operationId: deleteOrder
        produces:
          - application/xml
          - application/json
        parameters:
          - name: orderId
            in: path
            description: ID of the order that needs to be deleted
            required: true
            type: integer
            minimum: 1
            format: int64
        responses:
          "400":
            description: Invalid ID supplied
          "404":
            description: Order not found
    /user:
      post:
        tags:
          - user
        summary: Create user
        description: This can only be done by the logged in user.
        operationId: createUser
        produces:
          - application/xml
          - application/json
        parameters:
          - in: body
            name: body
            description: Created user object
            required: true
            schema:
              $ref: "#/definitions/User"
        responses:
          default:
            description: successful operation
    /user/createWithArray:
      post:
        tags:
          - user
        summary: Creates list of users with given input array
        description: ""
        operationId: createUsersWithArrayInput
        produces:
          - application/xml
          - application/json
        parameters:
          - in: body
            name: body
            description: List of user object
            required: true
            schema:
              type: array
              items:
                $ref: "#/definitions/User"
        responses:
          default:
            description: successful operation
    /user/createWithList:
      post:
        tags:
          - user
        summary: Creates list of users with given input array
        description: ""
        operationId: createUsersWithListInput
        produces:
          - application/xml
          - application/json
        parameters:
          - in: body
            name: body
            description: List of user object
            required: true
            schema:
              type: array
              items:
                $ref: "#/definitions/User"
        responses:
          default:
            description: successful operation    
    /user/logout:
      get:
        tags:
          - user
        summary: Logs out current logged in user session
        description: ""
        operationId: logoutUser
        produces:
          - application/xml
          - application/json
        parameters: []
        responses:
          default:
            description: successful operation
    "/user/{username}":
      get:
        tags:
          - user
        summary: Get user by user name
        description: ""
        operationId: getUserByName
        produces:
          - application/xml
          - application/json
        parameters:
          - name: username
            in: path
            description: "The name that needs to be fetched. Use user1 for testing. "
            required: true
            type: string
        responses:
          "200":
            description: successful operation
            schema:
              $ref: "#/definitions/User"
          "400":
            description: Invalid username supplied
          "404":
            description: User not found
      put:
        tags:
          - user
        summary: Updated user
        description: This can only be done by the logged in user.
        operationId: updateUser
        produces:
          - application/xml
          - application/json
        parameters:
          - name: username
            in: path
            description: name that need to be updated
            required: true
            type: string
          - in: body
            name: body
            description: Updated user object
            required: true
            schema:
              $ref: "#/definitions/User"
        responses:
          "400":
            description: Invalid user supplied
          "404":
            description: User not found
      delete:
        tags:
          - user
        summary: Delete user
        description: This can only be done by the logged in user.
        operationId: deleteUser
        produces:
          - application/xml
          - application/json
        parameters:
          - name: username
            in: path
            description: The name that needs to be deleted
            required: true
            type: string
        responses:
          "400":
            description: Invalid username supplied
          "404":
            description: User not found
  securityDefinitions:
    petstore_auth:
      type: oauth2
      authorizationUrl: "http://petstore.swagger.io/oauth/dialog"
      flow: implicit
      scopes:
        "write:pets": modify pets in your account
        "read:pets": read your pets
    api_key:
      type: apiKey
      name: api_key
      in: header
  definitions:
    Banner:
      type: object
      required:
        - id
        - title
        - slug
        - photo
        - description
      properties:
        id:
          type: integer
          format: int64
          example: 1
        title:
          type: string
          example: "Banner"
        slug:
          type: string
          example: "banner"
        photo:
          type: string
          example: "/storage/photos/1/Banner/banner-06.jpg"
        description:
          type: string
          format: html
          example: '<h2><span style=\"color: rgb(156, 0, 255); font-size: 2rem; font-weight: bold;\">Up to 40%</span><br></h2><h2><span style=\"color: rgb(156, 0, 255);\"></span></h2>'
        status:
          type: string
          description: Banner Status
          enum:
            - active
            - inactive
          example: "active"
        created_at:
          type: string
          format: date-time
          example: "2020-08-18T02:16:59.000000Z"
        updated_at:
          type: string
          format: date-time
          example: "2020-08-18T02:16:59.000000Z"
      xml:
        name: Banner
    Category:
      type: object
      required:
        - id
        - title
        - slug
        - photo
        - description
      properties:
        id:
          type: integer
          format: int64
          example: 1
        title:
          type: string
          example: "Men's Fashion"
        slug:
          type: string
          example: "mens-fashion"
        summary:
          type: string
        photo:
          type: string
          example: "/storage/photos/1/Category/mini-banner1.jpg"
        is_parent:
          type: number
          description: "0 or 1"
          enum:
            - 0
            - 1
        parent_id:
          type: number
          description: "Id of category or null"
        added_by:
          type: string
          description: "Added by user or null"
        status:
          type: string
          description: Banner Status
          enum:
            - active
            - inactive
          example: "active"
        created_at:
          type: string
          format: date-time
          example: "2020-08-18T02:16:59.000000Z"
        updated_at:
          type: string
          format: date-time
          example: "2020-08-18T02:16:59.000000Z"
      xml:
        name: Category
    Product:
      type: object
      required:
        - id
        - title
        - slug
        - photo
        - description
      properties:
        id:
          type: integer
          format: int64
          example: 1
        title:
          type: string
          example: "Men's Fashion"
        slug:
          type: string
          example: "mens-fashion"
        summary:
          type: string
        description:
          type: string
        photo:
          type: string
          example: "/storage/photos/1/Products/01f42-pwt004b.jpg,/storage/photos/1/Products/02090-pms003a.jpg,/storage/photos/1/Products/032f0-image3xxl-1-.jpg"
          description: "Multiple photos comma(,) seprated"
        stock:
          type: integer
          format: int64
          example: 3
        size:
          type: string
          example: L,XL
        condition:
          type: string
          enum:
            - default
            - hot
            - new
        status:
          type: string
          description: Banner Status
          enum:
            - active
            - inactive
          example: "active"
        price:
          type: integer
          example: 300
        discount:
          type: integer
          example: 10
        is_featured:
          type: integer
          enum:
            - 1
            - 0
        cat_id:
          type: integer
          format: int64
          example: 1
          description: 'Refrence of category'
        child_cat_id:
          type: integer
          format: int64
          example: 2
          description: 'Refrence of category'
        brand_id:
          type: integer
          format: int64
          example: 1
          description: 'Refrence of brand'
        created_at:
          type: string
          format: date-time
          example: "2020-08-18T02:16:59.000000Z"
        updated_at:
          type: string
          format: date-time
          example: "2020-08-18T02:16:59.000000Z"
        photos:
          type: array
          items:
            type: string
          example:
            - /storage/photos/1/Products/01f42-pwt004b.jpg
            - /storage/photos/1/Products/02090-pms003a.jpg
            - /storage/photos/1/Products/032f0-image3xxl.jpg
          description: Custom column this will return array of photos        
      xml:
        name: Product
    FeaturedProduct:
      type: object
      required:
        - id
        - title
        - slug
        - photo
        - description
      properties:
        id:
          type: integer
          format: int64
          example: 1
        title:
          type: string
          example: "Men's Fashion"
        slug:
          type: string
          example: "mens-fashion"
        summary:
          type: string
        description:
          type: string
        photo:
          type: string
          example: "/storage/photos/1/Products/01f42-pwt004b.jpg,/storage/photos/1/Products/02090-pms003a.jpg,/storage/photos/1/Products/032f0-image3xxl-1-.jpg"
          description: "Multiple photos comma(,) seprated"
        stock:
          type: integer
          format: int64
          example: 3
        size:
          type: string
          example: L,XL
        condition:
          type: string
          enum:
            - default
            - hot
            - new
        status:
          type: string
          description: Banner Status
          enum:
            - active
            - inactive
          example: "active"
        price:
          type: integer
          example: 300
        discount:
          type: integer
          example: 10
        is_featured:
          type: integer
          enum:
            - 1
            - 0
        cat_id:
          type: integer
          format: int64
          example: 1
          description: 'Refrence of category'
        child_cat_id:
          type: integer
          format: int64
          example: 2
          description: 'Refrence of category'
        brand_id:
          type: integer
          format: int64
          example: 1
          description: 'Refrence of brand'
        created_at:
          type: string
          format: date-time
          example: "2020-08-18T02:16:59.000000Z"
        updated_at:
          type: string
          format: date-time
          example: "2020-08-18T02:16:59.000000Z"
        photos:
          type: array
          items:
            type: string
          example:
            - /storage/photos/1/Products/01f42-pwt004b.jpg
            - /storage/photos/1/Products/02090-pms003a.jpg
            - /storage/photos/1/Products/032f0-image3xxl.jpg
          description: Custom column this will return array of photos
        cat_info:
          $ref: "#/definitions/Category"
      xml:
        name: FeaturedProduct
    Post:
      type: object
      required:
        - id
        - title
        - slug
        - summary
        - description
      properties:
        id:
          type: integer
          format: int64
          example: 1
        title:
          type: string
          example: "Men's Fashion"
        slug:
          type: string
          example: "mens-fashion"
        summary:
          type: string
        description:
          type: string
        quote:
          type: string
        photo:
          type: string
          example: "/storage/photos/1/Category/mini-banner1.jpg"
        tags:
          type: string          
        post_cat_id:
          type: number
        post_tag_id:
          type: number          
        added_by:
          type: string
          description: "Added by user or null"
        status:
          type: string
          description: Post Status
          enum:
            - active
            - inactive
          example: "active"
        created_at:
          type: string
          format: date-time
          example: "2020-08-18T02:16:59.000000Z"
        updated_at:
          type: string
          format: date-time
          example: "2020-08-18T02:16:59.000000Z"
        created_at_formatted:
          type: string          
          example: "14 Aug , 2020. Fri"
      xml:
        name: Post
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string        
        email:
          type: string
        email_verified_at:
          type: string
        photo:
          type: string
        role:
          type: string
          description: User Role
          enum:
            - admin
            - user
          example: "user"
        provider:
          type: string
        provider_id:
          type: string
        status:
          type: string
          description: Post Status
          enum:
            - active
            - inactive
          example: "active"
        created_at:
          type: string
          format: date-time
          example: "2020-08-18T02:16:59.000000Z"
        updated_at:
          type: string
          format: date-time
          example: "2020-08-18T02:16:59.000000Z"
      xml:
        name: User
    Order:
      type: object
      properties:
        id:
          type: integer
          format: int64
        petId:
          type: integer
          format: int64
        quantity:
          type: integer
          format: int32
        shipDate:
          type: string
          format: date-time
        status:
          type: string
          description: Order Status
          enum:
            - placed
            - approved
            - delivered
        complete:
          type: boolean
          default: false
      xml:
        name: Order    
    Tag:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      xml:
        name: Tag
    Pet:
      type: object
      required:
        - name
        - photoUrls
      properties:
        id:
          type: integer
          format: int64
        category:
          $ref: "#/definitions/Category"
        name:
          type: string
          example: doggie
        photoUrls:
          type: array
          xml:
            name: photoUrl
            wrapped: true
          items:
            type: string
        tags:
          type: array
          xml:
            name: tag
            wrapped: true
          items:
            $ref: "#/definitions/Tag"
        status:
          type: string
          description: pet status in the store
          enum:
            - available
            - pending
            - sold
      xml:
        name: Pet
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
  externalDocs:
    description: Find out more about Swagger
    url: "http://swagger.io"
